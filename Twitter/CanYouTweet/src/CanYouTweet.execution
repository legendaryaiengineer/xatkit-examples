import library "CanYouTweet/src/CanYouTweet.intent" as CanYouTweetLib
import library "CoreLibrary"
import platform "SlackPlatform"
import platform "TwitterPlatform"
import library "CoreLibrary"

use provider SlackPlatform.SlackIntentProvider

on intent Greetings do
	SlackPlatform.Reply("Hi, I can help you interact with twitter!\nYou can start with something like `Can you post <whatever you want>?")

on intent Help do
	SlackPlatform.Reply('You can try "search for <whatever you want>"')

//----Twitter specific----
on intent PostTweet do
	val content = context.get("Twitter").get("content") as String
	if(content != ""){
		val result = TwitterPlatform.PostAtweet(content)
		
		if(result == 0){
			SlackPlatform.Reply('I just tweeted: _' + content + '_ for you.')
		}else{
			SlackPlatform.Reply("I couldn't tweet that for you right now.")
		}		
	}else{
		SlackPlatform.Reply("I'm not going to post an empty tweet, look somewhere else")
	}

on intent SearchTweets do
	val contentQuery = context.get("Twitter").get("query") as String
	if(contentQuery != ""){
		val result = TwitterPlatform.LookForTweets(contentQuery)	
		
		if(result == "1"){
			SlackPlatform.Reply("I couldn't do that search")
		}else{
			if(result == "0"){
				SlackPlatform.Reply("No results for: _" + contentQuery + "_")
			}else{
				SlackPlatform.ReplyAttachmentsMessage(result as java.util.List<com.github.seratch.jslack.api.model.Attachment>)
			}
		}		
	}else{
		SlackPlatform.Reply("I can't search for that")
	}

on intent SendDM do
	if(context.get("Twitter").get("user") != ""){
		SlackPlatform.Reply("Ok, so you want to send a DM to *@" + context.get("Twitter").get("user") + "*")
		SlackPlatform.Reply('Write "DM content:" and then add what you want to say to him/her in double quotes.')
	}else{
		SlackPlatform.Reply("I don't know anyone by that name")
	}

on intent SpecifyDM do
	val DMcontent = context.get("Twitter").get("text") as String
	if(DMcontent != ""){
		val result = TwitterPlatform.SendDM(context.get("Twitter").get("user") as String, DMcontent)	
		if(result == 0){
			SlackPlatform.Reply('Message Sent! :smile:')
		}else{
			SlackPlatform.Reply("I couldn't send it :upside_down_face:")
		}		
	}else{
		SlackPlatform.Reply("I'm not going to send that")
	}
	
on intent ReceiveDM do
	val result = TwitterPlatform.ReceiveDM
	if (result == "1"){
		SlackPlatform.Reply("I couldn't retrieve any message, try again later. :upside_down_face:")
	}else{
		if(result == "0"){
			SlackPlatform.Reply("There are no messages...")
		}else{
			SlackPlatform.ReplyAttachmentsMessage(result as java.util.List<com.github.seratch.jslack.api.model.Attachment>)	
		}
	}

on intent GetTrends do
	var Object result = null;
	var noResultsMessage = "";
	if(context.get("Twitter").get("woeid") != ""){
		result = TwitterPlatform.GetTrends(Integer.parseInt(context.get("Twitter").get("woeid") as String))
		noResultsMessage = "No trending topics where found for the WOEID: " + context.get("Twitter").get("woeid")
	}
	else {
		if (context.get("Twitter").get("locationName") != ""){
			result = TwitterPlatform.GetTrends(context.get("Twitter").get("locationName") as String)
			noResultsMessage = "No trending topics where found for the location with name: " + context.get("Twitter").get("locationName")
		}else {
			result = TwitterPlatform.GetTrends()
			noResultsMessage = "No trending topics where found worldwide"
		}
	}
	if (result == "1"){
		SlackPlatform.Reply("An error occurred while trying to retrieve the ternding topics, try again later. :upside_down_face:")
	}else{
		if(result == "0"){
			SlackPlatform.Reply(noResultsMessage)
		}else{
			SlackPlatform.ReplyAttachmentsMessage(result as java.util.List<com.github.seratch.jslack.api.model.Attachment>)	
		}
	}
	
on intent Default_Fallback_Intent do
	SlackPlatform.Reply("Sorry I'll have to check that on my dictionary and get back to you later :(")
	